Q.LRU Cache

ex: Input: cap = 2, Q = 2, Queries = [["PUT", 1, 2], ["GET", 1]]
    Output: [2]
    Explanation: Cache Size = 2
    ["PUT", 1, 2] will insert the key-value pair (1, 2) in the cache,
    ["GET", 1] will print the value corresponding to Key 1, ie 2.

Code :
struct Node 
{
    int key, val;
    Node *next;
    Node(int key, int val) 
    {
        this->key = key;
        this->val = val;
        next = nullptr;
    }
};

class LRUCache 
{
    private:
        int cap;
        Node *head, *tail;
    public:
   
    LRUCache(int cap) 
    {
         this->cap = cap;
        head = tail = nullptr;
    }

    
    int get(int key) 
    {
        if(!head) return -1;
        else if(tail->key == key) return tail->val;
        else if(head->key == key) 
        {
            tail->next = head;
            head = head->next;
            tail = tail->next;
            tail->next = nullptr;
            return tail->val;
        }
        else {
            Node *prev = head, *cur = head->next;
            while(cur) {
                if(cur->key == key) 
                {
                    prev->next = cur->next;
                    tail->next = cur;
                    tail = tail->next;
                    tail->next = nullptr;
                    return tail->val;
                }
                
                prev = cur;
                cur = cur->next;
            }
        }
        
        return -1;
    }

    .
    void put(int key, int value) 
    {
        if(!head) 
        {
            head = tail = new Node(key, value);
            cap--;
            return;
        }
        else if(tail->key == key) 
        {
            tail->val = value;
            return;
        }
        else if(head->key == key) 
        {
            tail->next = head;
            head = head->next;
            tail = tail->next;
            tail->next = nullptr;
            tail->val = value;
            return;
        }
        else
        {
            Node *prev = head, *cur = head->next;
            while(cur)
            {
                if(cur->key == key)
                {
                    prev->next = cur->next;
                    tail->next = cur;
                    tail = tail->next;
                    tail->next = nullptr;
                    tail->val = value;
                    return;
                }
                
                prev = cur;
                cur = cur->next;
            }
        }
        
        
        tail->next = new Node(key, value);
        tail = tail->next;
        cap--;
        
        
        if(cap<0) 
        {
            Node *temp = head;
            head = head->next;
            delete temp;
            cap++;
        }
    }
};
